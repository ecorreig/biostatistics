com = 3 + 2i
type(com)
class(com)
com*2
3+0i
class(3+0i)
class(i)
class(0+i)
class(0+1i)
class(1i)
1 - (1- 0.0048)^(1/27)
0.0048/27
0.0048*27
setwd('../Desktop/biostatistics/')
require(glmnet)
?cv.glmnet
grip = read.csv('grip_net.csv', fileEncoding = "UTF-8")
grip = read.csv('grip_net.csv', fileEncoding = "UTF-8")
View(grip)
grip$X=NULL
grip = grip[,4:ncol(grip)]
logistic_lasso = function(df, y_index=1, train, weights=rep(1, nrow(df)), plots=TRUE, lambda="1se"){
x_train = df[train, -y_index]
y_train = df[train, y_index]
d_train=cbind(x_train, y_train)
x_test <- df[-train, -y_index]
y_test <- df[-trian, y_index]
model <- model.matrix(y~. , data=d_train)
fit <- cv.glmnet(model,y_train,alpha=1, family="binomial", weights = weights)
if(plots){plot(fit)}
if (lambda=="1se"){lam = "lambda.1se"}
else{lam= "lambda.min"}
cc = predict(fit, type='coefficients', s = lam)
coefs = cc[1:dim(cc)[1],]
ffc = coefs[coefs!=0]
return(ffc)
}
logistic_lasso = function(df, y_index=1, weights=rep(1, nrow(df)), plots=TRUE, lambda="1se"){
test = sample(nrow(df),round(nrow(df)/5),replace = FALSE)
train=(-test)
x_train = df[train, -y_index]
y_train = df[train, y_index]
d_train=cbind(x_train, y_train)
x_test <- df[test, -y_index]
y_test <- df[test, y_index]
model <- model.matrix(y~. , data=d_train)
fit <- cv.glmnet(model,y_train,alpha=1, family="binomial", weights = weights)
if(plots){plot(fit)}
if (lambda=="1se"){lam = "lambda.1se"}
else{lam= "lambda.min"}
cc = predict(fit, type='coefficients', s = lam)
coefs = cc[1:dim(cc)[1],]
ffc = coefs[coefs!=0]
return(ffc)
}
logistic_lasso(grip, 64)
logistic_lasso = function(df, y_index=1, weights=rep(1, nrow(df)), plots=TRUE, lambda="1se"){
test = sample(nrow(df),round(nrow(df)/5),replace = FALSE)
train=(-test)
x<- df[,-c(y_index)]
y<- df[,y_index]
data<-cbind(x,y)
x_train <- x[train,]
y_train <- data$y[train]
x_test <- x[test,]
y_test <- data$y[test]
model <- model.matrix(y~.-weights , data=data[train,])
fit <- cv.glmnet(model,y_train,alpha=1, family="binomial", weights = weights)
if(plots){plot(fit)}
if (lambda=="1se"){lam = "lambda.1se"}
else{lam= "lambda.min"}
cc = predict(fit, type='coefficients', s = lam)
coefs = cc[1:dim(cc)[1],]
ffc = coefs[coefs!=0]
return(ffc)
}
logistic_lasso(grip, 64)
logistic_lasso = function(df, y_index=1, weights=FALSE, plots=TRUE, lambda="1se"){
if (!weights){weights = rep(1, nrow(df))}
test = sample(nrow(df),round(nrow(df)/5),replace = FALSE)
train=(-test)
x<- df[,-c(y_index)]
y<- df[,y_index]
data<-cbind(x,y)
x_train <- x[train,]
y_train <- data$y[train]
x_test <- x[test,]
y_test <- data$y[test]
model <- model.matrix(y~. , data=data[train,])
fit <- cv.glmnet(model,y_train,alpha=1, family="binomial", weights = weights)
if(plots){plot(fit)}
if (lambda=="1se"){lam = "lambda.1se"}
else{lam= "lambda.min"}
cc = predict(fit, type='coefficients', s = lam)
coefs = cc[1:dim(cc)[1],]
ffc = coefs[coefs!=0]
return(ffc)
}
logistic_lasso(grip, 64)
logistic_lasso = function(df, y_index=1, weights=FALSE, plots=TRUE, lambda="1se"){
test = sample(nrow(df),round(nrow(df)/5),replace = FALSE)
train=(-test)
if (!weights){weights = rep(1, length(train))}
x<- df[,-c(y_index)]
y<- df[,y_index]
data<-cbind(x,y)
x_train <- x[train,]
y_train <- data$y[train]
x_test <- x[test,]
y_test <- data$y[test]
model <- model.matrix(y~. , data=data[train,])
fit <- cv.glmnet(model,y_train,alpha=1, family="binomial", weights = weights)
if(plots){plot(fit)}
if (lambda=="1se"){lam = "lambda.1se"}
else{lam= "lambda.min"}
cc = predict(fit, type='coefficients', s = lam)
coefs = cc[1:dim(cc)[1],]
ffc = coefs[coefs!=0]
return(ffc)
}
logistic_lasso(grip, 64)
logistic_lasso = function(df, y_index=1, weights=FALSE, plots=TRUE, lambda="1se"){
train = sample(nrow(df),round(nrow(df)*4/5),replace = FALSE)
test=(-train)
if (!weights){weights = rep(1, length(train))}
x<- df[,-c(y_index)]
y<- df[,y_index]
data<-cbind(x,y)
x_train <- x[train,]
y_train <- data$y[train]
x_test <- x[test,]
y_test <- data$y[test]
model <- model.matrix(y~. , data=data[train,])
fit <- cv.glmnet(model,y_train,alpha=1, family="binomial", weights = weights)
if(plots){plot(fit)}
if (lambda=="1se"){lam = "lambda.1se"}
else{lam= "lambda.min"}
cc = predict(fit, type='coefficients', s = lam)
coefs = cc[1:dim(cc)[1],]
ffc = coefs[coefs!=0]
return(ffc)
}
logistic_lasso(grip, 64)
sum(is.na(grip))
logistic_EN = function(df, alpha=1, y_index=1, weights=FALSE, plots=TRUE, lambda="1se"){
train = sample(nrow(df),round(nrow(df)*4/5),replace = FALSE)
test=(-train)
x<- df[,-c(y_index)]
y<- df[,y_index]
data<-cbind(x,y)
x_train <- x[train,]
y_train <- data$y[train]
x_test <- x[test,]
y_test <- data$y[test]
if (weights){
model <- model.matrix(y~. weights, data=data[train,])
fit <- cv.glmnet(model,y_train,alpha=alpha, family="binomial", weights = weights)}
else {
model <- model.matrix(y~. weights, data=data[train,])
fit <- cv.glmnet(model,y_train, alpha=alpha, family="binomial")
}
if(plots){plot(fit)}
if (lambda=="1se"){lam = "lambda.1se"}
else {lam= "lambda.min"}
cc = predict(fit, type='coefficients', s = lam)
coefs = cc[1:dim(cc)[1],]
ffc = coefs[coefs!=0]
return(ffc)
}
logistic_EN = function(df, alpha=1, y_index=1, weights=FALSE, plots=TRUE, lambda="1se"){
train = sample(nrow(df),round(nrow(df)*4/5),replace = FALSE)
test=(-train)
x<- df[,-c(y_index)]
y<- df[,y_index]
data<-cbind(x,y)
x_train <- x[train,]
y_train <- data$y[train]
x_test <- x[test,]
y_test <- data$y[test]
if (weights){
model <- model.matrix(y~. - weights, data=data[train,])
fit <- cv.glmnet(model,y_train,alpha=alpha, family="binomial", weights = weights)
}
else {
model <- model.matrix(y~., data=data[train,])
fit <- cv.glmnet(model,y_train, alpha=alpha, family="binomial")
}
if(plots){plot(fit)}
if (lambda=="1se"){lam = "lambda.1se"}
else {lam= "lambda.min"}
cc = predict(fit, type='coefficients', s = lam)
coefs = cc[1:dim(cc)[1],]
ffc = coefs[coefs!=0]
return(ffc)
}
logistic_EN(grip, 1, 64)
logistic_EN = function(df, alpha=1, y_index=1, weights=FALSE, plots=TRUE, lambda="1se"){
if (sum(is.na(grip)>0)){
print("Hi ha missings al dataframe, si us plau treu-los")
next
}
train = sample(nrow(df),round(nrow(df)*4/5),replace = FALSE)
test=(-train)
x<- df[,-c(y_index)]
y<- df[,y_index]
data<-cbind(x,y)
x_train <- x[train,]
y_train <- data$y[train]
x_test <- x[test,]
y_test <- data$y[test]
if (weights){
model <- model.matrix(y~. - weights, data=data[train,])
fit <- cv.glmnet(model,y_train,alpha=alpha, family="binomial", weights = weights)
}
else {
model <- model.matrix(y~., data=data[train,])
fit <- cv.glmnet(model,y_train, alpha=alpha, family="binomial")
}
if(plots){plot(fit)}
if (lambda=="1se"){lam = "lambda.1se"}
else {lam= "lambda.min"}
cc = predict(fit, type='coefficients', s = lam)
coefs = cc[1:dim(cc)[1],]
ffc = coefs[coefs!=0]
return(ffc)
}
logistic_EN(grip, 1, 64)
logistic_EN = function(df, alpha=1, y_index=1, weights=FALSE, plots=TRUE, lambda="1se"){
if (sum(is.na(grip)>0)){
print("Hi ha missings al dataframe, si us plau treu-los")
stop
}
train = sample(nrow(df),round(nrow(df)*4/5),replace = FALSE)
test=(-train)
stop()
x<- df[,-c(y_index)]
y<- df[,y_index]
data<-cbind(x,y)
x_train <- x[train,]
y_train <- data$y[train]
x_test <- x[test,]
y_test <- data$y[test]
if (weights){
model <- model.matrix(y~. - weights, data=data[train,])
fit <- cv.glmnet(model,y_train,alpha=alpha, family="binomial", weights = weights)
}
else {
model <- model.matrix(y~., data=data[train,])
fit <- cv.glmnet(model,y_train, alpha=alpha, family="binomial")
}
if(plots){plot(fit)}
if (lambda=="1se"){lam = "lambda.1se"}
else {lam= "lambda.min"}
cc = predict(fit, type='coefficients', s = lam)
coefs = cc[1:dim(cc)[1],]
ffc = coefs[coefs!=0]
return(ffc)
}
logistic_EN(grip, 1, 64)
?stop
logistic_EN = function(df, alpha=1, y_index=1, weights=FALSE, plots=TRUE, lambda="1se"){
if (sum(is.na(grip)>0)){
stop("Hi ha missings al dataframe, si us plau treu-los")
}
train = sample(nrow(df),round(nrow(df)*4/5),replace = FALSE)
test=(-train)
stop()
x<- df[,-c(y_index)]
y<- df[,y_index]
data<-cbind(x,y)
x_train <- x[train,]
y_train <- data$y[train]
x_test <- x[test,]
y_test <- data$y[test]
if (weights){
model <- model.matrix(y~. - weights, data=data[train,])
fit <- cv.glmnet(model,y_train,alpha=alpha, family="binomial", weights = weights)
}
else {
model <- model.matrix(y~., data=data[train,])
fit <- cv.glmnet(model,y_train, alpha=alpha, family="binomial")
}
if(plots){plot(fit)}
if (lambda=="1se"){lam = "lambda.1se"}
else {lam= "lambda.min"}
cc = predict(fit, type='coefficients', s = lam)
coefs = cc[1:dim(cc)[1],]
ffc = coefs[coefs!=0]
return(ffc)
}
?stop
logistic_EN(grip, 1, 64)
grip = grip[complete.cases(grip),]
logistic_EN(grip, 1, 64)
logistic_EN = function(df, alpha=1, y_index=1, weights=FALSE, plots=TRUE, lambda="1se"){
if (sum(is.na(grip)>0)){
stop("Hi ha missings al dataframe, si us plau treu-los")
}
train = sample(nrow(df),round(nrow(df)*4/5),replace = FALSE)
test=(-train)
x<- df[,-c(y_index)]
y<- df[,y_index]
data<-cbind(x,y)
x_train <- x[train,]
y_train <- data$y[train]
x_test <- x[test,]
y_test <- data$y[test]
if (weights){
model <- model.matrix(y~. - weights, data=data[train,])
fit <- cv.glmnet(model,y_train,alpha=alpha, family="binomial", weights = weights)
}
else {
model <- model.matrix(y~., data=data[train,])
fit <- cv.glmnet(model,y_train, alpha=alpha, family="binomial")
}
if(plots){plot(fit)}
if (lambda=="1se"){lam = "lambda.1se"}
else {lam= "lambda.min"}
cc = predict(fit, type='coefficients', s = lam)
coefs = cc[1:dim(cc)[1],]
ffc = coefs[coefs!=0]
return(ffc)
}
logistic_EN(grip, 1, 64)
logistic_EN(grip, 1, 64, plots = F)
logistic_EN = function(df, alpha=1, train, y_index=1, weights=FALSE, plots=TRUE, lambda="1se"){
if (sum(is.na(grip)>0)){
stop("Hi ha missings al dataframe, si us plau treu-los")
}
test=(-train)
x<- df[,-c(y_index)]
y<- df[,y_index]
data<-cbind(x,y)
x_train <- x[train,]
y_train <- data$y[train]
x_test <- x[test,]
y_test <- data$y[test]
if (weights){
model <- model.matrix(y~. - weights, data=data[train,])
fit <- cv.glmnet(model,y_train,alpha=alpha, family="binomial", weights = weights)
}
else {
model <- model.matrix(y~., data=data[train,])
fit <- cv.glmnet(model,y_train, alpha=alpha, family="binomial")
}
if(plots){plot(fit)}
if (lambda=="1se"){lam = "lambda.1se"}
else {lam= "lambda.min"}
cc = predict(fit, type='coefficients', s = lam)
coefs = cc[1:dim(cc)[1],]
ffc = coefs[coefs!=0]
return(ffc)
}
train = sample(nrow(grip), round(nrow(grip)*4/5))
logistic_EN(grip, 1, train, 64, plots = F)
logistic_EN = function(df, alpha=1, train, y_index=1, weights=FALSE, plots=TRUE, lambda="1se"){
# Funció: Calcula lasso, ridge regression i elastic net segons el valor d'alpha que li passem.
if (sum(is.na(grip)>0)){
stop("Hi ha missings al dataframe, si us plau treu-los")
}
test=(-train)
x<- df[,-c(y_index)]
y<- df[,y_index]
data<-cbind(x,y)
x_train <- x[train,]
y_train <- data$y[train]
x_test <- x[test,]
y_test <- data$y[test]
if (!weights){
model <- model.matrix(y~., data=data[train,])
fit <- cv.glmnet(model,y_train, alpha=alpha, family="binomial")
}
else {
model <- model.matrix(y~. - weights, data=data[train,])
fit <- cv.glmnet(model,y_train,alpha=alpha, family="binomial", weights = weights)
}
if(plots){plot(fit)}
if (lambda=="1se"){lam = "lambda.1se"}
else {lam= "lambda.min"}
cc = predict(fit, type='coefficients', s = lam)
coefs = cc[1:dim(cc)[1],]
ffc = coefs[coefs!=0]
lambda_min<-fit$lam
if (!weights){
newX <- model.matrix(~.,data=x_test)
}
else {
newX <- model.matrix(~.-weights,data=x_test, weights = x_test$weights)
}
fit_test<-predict(fit,s=lambda_min, newx=newX, type='response')
fit.pred=rep(0,nrow(x_test))
fit.pred[fit_test >.5]=1
ttt=table(fit.pred, y_test)
rend = (ttt[1]+ttt[4])/sum(ttt)
returns = list(ffc, ttt, rend)
return(ffc)
}
logistic_EN(grip, 1, train, 64, plots = F)
source('C:/Users/eudald/Desktop/biostatistics/lasso.R', encoding = 'UTF-8')
logistic_EN(grip, 1, train, 64, plots = F)
logistic_EN(grip, 1, train, 64, plots = F)
object$lambda.min
object$lambda.1se
debugSource('C:/Users/eudald/Desktop/biostatistics/lasso.R', encoding = 'UTF-8')
logistic_EN(grip, 1, train, 64, plots = F)
source('C:/Users/eudald/Desktop/biostatistics/lasso.R', encoding = 'UTF-8')
logistic_EN(grip, 1, train, 64, plots = F)
source('C:/Users/eudald/Desktop/biostatistics/lasso.R', encoding = 'UTF-8')
logistic_EN(grip, 1, train, 64, plots = F)
source('C:/Users/eudald/Desktop/biostatistics/lasso.R', encoding = 'UTF-8')
logistic_EN(grip, 1, train, 60, plots = F)
source('C:/Users/eudald/Desktop/biostatistics/lasso.R', encoding = 'UTF-8')
logistic_EN(grip, 1, train, 60, plots = F)
source('C:/Users/eudald/Desktop/biostatistics/lasso.R', encoding = 'UTF-8')
rm(logistic_lasso())
source('C:/Users/eudald/Desktop/biostatistics/lasso.R', encoding = 'UTF-8')
